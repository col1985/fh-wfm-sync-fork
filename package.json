{
  "name": "fh-wfm-sync",
  "version": "0.3.3",
  "description": "An sync module for WFM",
  "main": "lib/angular/sync-ng.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/feedhenry-raincatcher/raincatcher-sync.git"
  },
  "scripts": {
    "test-watch": "mochify --watch lib/**/**/*-spec.js",
    "test-debug": "mochify --debug lib/**/**/*-spec.js",
    "test-cover": "mochify --cover lib/**/**/*-spec.js",
    "test": "grunt test",
    "grunt-eslint": "grunt eslint"
  },
  "keywords": [
    "wfm",
    "sync"
  ],
  "author": {
    "name": "Sebastien Blanc, Brian Leathem"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "^2.6.3",
    "fh-wfm-mediator": "0.3.3",
    "lodash": "4.17.4",
    "q": "1.4.1",
    "rx": "4.1.0",
    "shortid": "2.2.8"
  },
  "devDependencies": {
    "angular": "1.5.3",
    "angular-mocks": "1.5.3",
    "async": "1.5.0",
    "bunyan": "1.8.0",
    "chai": "3.5.0",
    "config-chain": "1.1.10",
    "cors": "2.7.1",
    "dotenv": "2.0.0",
    "express": "4.13.4",
    "fh-mbaas-api": "6.1.6",
    "grunt": "1.0.1",
    "grunt-cli": "1.2.0",
    "grunt-eslint": "18.0.0",
    "grunt-mocha-test": "0.13.2",
    "load-grunt-tasks": "3.5.2",
    "mocha": "3.2.0",
    "nodemon": "1.9.1",
    "shortid": "^2.2.6",
    "should": "8.3.0",
    "sinon": "1.17.6",
    "sinon-as-promised": "4.0.2"
  },
  "readme": "# FeedHenry WFM sync\n\nA sync module for FeedHenry WFM providing :\n- A Server-side sync module\n- A Front-end (Angular Service) sync module\n\nThis module makes uses the [$fh.sync Client](https://access.redhat.com/documentation/en/red-hat-mobile-application-platform-hosted/3/paged/client-api/chapter-11-fhsync) and [$fh.sync Cloud](https://access.redhat.com/documentation/en/red-hat-mobile-application-platform-hosted/3/paged/cloud-api/chapter-10-fhsync) APIs to provide the data synchronisation functionality.\n\n## Client-side usage\n\n### Setup\n\nThis module is packaged in a CommonJS format, exporting the name of the Angular namespace.  The module can be included in an angular.js as follows:\n\n```javascript\nangular.module('app', [require('fh-wfm-sync')], function(syncService){\n// ...\n});\n```\n### Integration\n\n#### Angular service\n\nThe sync service must first be initialized using the `syncService.init()`. Generally, the syncService will be injected into another Angular service (or in a config block) :\n\n```javascript\n\n.factory('workorderSync', function($q, $timeout, syncService) {\n  syncService.init($fh, config.syncOptions);\n});\n```\n\n##### Managing Datasets\n\nOnce initialized the syncService can manage multiple `datasets` using the following function:\n\n```javascript\n\nvar config = {\n  ...\n  datasetId: \"workorders\"\n  ...\n};\n\nvar queryParams = {\n  //Optional object passed with dataset sync requests.\n};\n\nsyncService.manage(config.datasetId, null, queryParams);\n\n```\n\n### Topic Unique Identifiers\n\nEach of the topics takes an `object` as a parameter. The `topicUid` parameter is an *optional* parameter used to allow the unique identifier to be appended to the `done` and `error` topics published.\n\nThis allows for the scenario where a developer wishes to limit the response of the topic.\n\nE.g\n\n```javascript\n\n//Generate a random number / string\nvar topicUid = Math.floor(Math.random() * 100000000);\n\n//Subscribing to the done state for the list topic.\n//The topicUid is appended to limit the response of the wfm:sync:datasetid:list topic to this subscriber\nmediator.subscribe(\"done:wfm:sync:datasetid:list:\" + topicUid, function(arrayOfItems) {\n  ...\n  handleListSuccess(arrayOfItems);\n  ...\n});\n\n//Subscribing to the error state for the list topic.\n//The topicUid is appended to limit the response of the wfm:sync:datasetid:list topic to this subscriber\nmediator.subscribe(\"error:wfm:sync:datasetid:list:\" + topicUid, function(error) {\n\n  handleError(error);\n\n});\n\nmediator.publish(\"wfm:sync:datasetid:list\", {\n    topicUid: topicUid\n});\n\n```\n\nDevelopers may also wish to not include the `topicUid` parameter. This will mean that the `done` and `error` topics will not have any unique identifiers appended.\n\nThis is useful if the developer wishes to have global subscribers to the topics. E.g. a global subscriber to the *done:wfm:sync:list* topic that handles the completion of the list topic.\n\n\n\n### Dataset Topic Subscriptions\n\nThe `syncService.manage` function automatically subscribes to the following topics for a `dataset`. For a `dataset` with an ID `datasetid`, the following topics are published:\n\n#### wfm:sync:datasetid:create\n\n##### Description\n\nCreating a new item in the dataset.\n\n##### Example\n\n\n```javascript\nvar parameters = {\n  itemToCreate: {\n    //A Valid JSON Object\n  },\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n}\n\nmediator.publish(\"wfm:sync:datasetid:create\", parameters);\n```\n\n\n#### wfm:sync:datasetid:update\n\n##### Description\n\nUpdating an existing item in the dataset.\n\n##### Example\n\n\n```javascript\nvar datasetItemToUpdate = {\n  ...\n  ...\n}\n\nvar parameters = {\n  itemToUpdate: {\n    //A Valid JSON Object\n  },\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:update\", parameters);\n```\n\n#### wfm:sync:datasetid:remove\n\n##### Description\n\nRemoving a single item from the dataset.\n\n##### Example\n\n\n```javascript\n\nvar parameters = {\n  id: \"idofdataitemtoremove\",\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:remove\", parameters);\n```\n\n\n#### wfm:sync:datasetid:list\n\n##### Description\n\nListing all of the items in the dataset.\n\n##### Example\n\n\n```javascript\n\nvar parameters = {\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:list\", parameters);\n\n```\n\n#### wfm:sync:datasetid:start\n\n##### Description\n\nStart the synchronisation process from client to cloud for this dataset.\n\n##### Example\n\n\n```javascript\nvar parameters = {\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:start\", parameters);\n```\n\n#### wfm:sync:datasetid:stop\n\n##### Description\n\nStop the synchronisation process from client to cloud for this dataset.\n\n##### Example\n\n\n```javascript\nvar parameters = {\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:stop\", parameters);\n```\n\n#### wfm:sync:datasetid:force_sync\n\n##### Description\n\nForce the synchronisation of client and cloud data for this dataset.\n\n##### Example\n\n\n```javascript\nvar parameters = {\n  //Optional topic unique identifier.\n  topicUid: \"uniquetopicid\"\n};\n\nmediator.publish(\"wfm:sync:datasetid:force_sync\", parameters);\n```\n\n\n\n### Dataset Published Topics\n\nThe following topics are published by the module for each `dataset`.\n\nEach of the topics will have the `topicUid` parameter appended to the topic if it is passed as a parameter when published. \n\nSee the [Topic Unique Identifiers](#topic-unique-identifiers) section for more details.\n\n#### done:wfm:sync:datasetid:create\n\nThe item was created for a dataset with id `datasetid`.\n\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:create\", function(createdItem) {\n  ...\n  /**\n  *\n  *  createdItem = {\n       ...\n       //A unique ID assigned to the data item created\n  *    _localuid: \"localid\"\n       ...\n  *  }\n  *\n  */\n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:create\n\nAn error occurred when creating an item.\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:create\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### done:wfm:sync:datasetid:update\n\nAn item for the dataset with ID `datasetid` was updated.\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:update\", function(updatedItem) {\n  ...\n  /**\n  *\n  *  updatedItem = {\n  *    ...\n  *    ...\n  *  }\n  *\n  */\n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:update\n\nAn error occurred when updating an item for the dataset with ID `datasetid`.\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:update\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### done:wfm:sync:datasetid:remove\n\nAn item was removed from the dataset.\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:remove\", function() {\n  ...\n  \n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:remove\n\nAn error occurred when removing an item from the dataset.\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:remove:datasetitemid\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### done:wfm:sync:datasetid:list\n\nA list of items for a dataset with ID `datasetid` completed successfully.\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:list\", function(listOfItems) {\n  ...\n  /**\n  *\n  *  listOfItems = [{\n  *    ...\n  *    ...\n  *  }, {\n  *     ...\n  *     ...\n  *   }]\n  *\n  */\n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:list\n\nAn error occurred when listing items for a dataset with ID `datasetid`\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:list\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### done:wfm:sync:datasetid:start\n\nThe client-cloud sync process for a dataset with ID `datasetid` started successfully.\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:start\", function() {\n  ...\n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:start\n\nAn error occurred when starting the client cloud sync process for a dataset with ID `datasetid`\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:start\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### done:wfm:sync:datasetid:stop\n\nThe client-cloud sync process for a dataset with ID `datasetid` stopped successfully.\n\n```javascript\n\nmediator.subscribe(\"done:wfm:sync:datasetid:stop\", function() {\n  ...\n  ...\n});\n \n```\n\n#### error:wfm:sync:datasetid:stop\n\nAn error occurred when stopping the client cloud sync process for a dataset with ID `datasetid`\n \n```javascript\n\nmediator.subscribe(\"error:wfm:sync:datasetid:stop\", function(error) {\n  ...\n  \n  console.log(error.message);\n  ...\n});\n \n```\n\n#### Notification Topics\n\nThe module publishes topics covering all of the notification codes available to the $fh.sync Client API.\n\nThe list of notification codes published are:\n\n\n| Topic         | Description           |\n| ------------- |:-------------:| \n| wfm:sync:datasetid:client_storage_failed  | Loading or saving to client storage failed. This is a critical error and the Sync Client will not work properly without client storage. |\n| wfm:sync:datasetid:sync_started  | A synchronization cycle with the server has been started. |\n| wfm:sync:datasetid:sync_complete  | A synchronization cycle with the server has been completed. |\n| wfm:sync:datasetid:offline_update  | An attempt was made to update or delete a record while offline. |\n| wfm:sync:datasetid:collision_detected  |  Update failed due to data collision. |\n| wfm:sync:datasetid:remote_update_failed  | Update failed for a reason other than data collision. |\n| wfm:sync:datasetid:remote_update_applied  | An update was applied to the remote data store. |\n| wfm:sync:datasetid:local_update_applied  | An update was applied to the local data store. |\n| wfm:sync:datasetid:delta_received  | A change was received from the remote data store for the dataset. |\n| wfm:sync:datasetid:sync_failed  | Synchronization loop failed to complete. |\n\n##### Topic Parameters\n\nEach of these topics will be published with an object describing the event:\n\n```javascript\n{\n  //The dataset that the notification is associated with\n  dataset_id: \"workorders\",\n  // The unique identifier that the notification is associated with.\n  // This will be the unique identifier for a record if the notification is related to an individual record,\n  // or the current hash of the dataset if the notification is associated with a full dataset\n  //  (for example, sync_complete)\n  uid: \"workorder1234\",\n  // Optional free text message with additional information\n  message: \"A remote update failed for this data set\"\n  // The notification message code (See above)\n  code: \"remote_update_failed\"\n}\n```\n\n## Usage in an express backend\n\n### Setup\n\nThe server-side component of this WFM module exports a function that takes express and mediator instances as parameters, as in:\n\n```javascript\nvar sync = require('fh-wfm-sync/lib/server');\nvar config = require('../config');\n\nmodule.exports = function(mediator, app, mbaasApi) {\n  sync.init(mediator, mbaasApi, config.datasetId, config.syncOptions);\n};\n```\n#### Sync config options\n\nCheck a complete example [here](https://github.com/feedhenry-staff/wfm-workorder/blob/master/lib/config.js)\n\n```javascript\n{\n  datasetId : 'workorders',\n  syncOptions : {\n    \"syncFrequency\": 5,\n    \"sync_frequency\" : 5,\n    \"storage_strategy\": \"dom\",\n    \"do_console_log\": false\n  }\n}\n```\n\n##### Sync frequencies\n\nSync frequency is set individually for the client and the server.\n* On the client the setting is named `sync_frequency`.\n* On the server the setting is named `syncFrequency`.\n\nIt is recommended that these settings share the same value.\n\n##### Custom data collision handler setup\n\nA custom data collision handler can be used by the sync module by assigning your own custom collision handler function to the sync config options `syncOptions.dataCollisionHandler` property. This may be configured like the example below:\n\n```javascript\nvar syncOptions = config.syncOptions;\nsyncOptions.dataCollisionHandler = function() {\n  //Custom data collision handler\n};\n\nsync.init(mediator, mbaasApi, config.datasetId, syncOptions);\n```\nCheck a complete example [here](https://github.com/feedhenry-raincatcher/raincatcher-demo-cloud/blob/master/lib/app.js#L66)\n\nFor further information about sync data collision handlers, please refer to the  [$fh.sync documentation](https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform_hosted/3/html/cloud_api/fh-sync#fh-sync-handlecollision)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/feedhenry-raincatcher/raincatcher-sync/issues"
  },
  "homepage": "https://github.com/feedhenry-raincatcher/raincatcher-sync#readme",
  "_id": "fh-wfm-sync@0.3.3",
  "_shasum": "852c0aa516f8f65bfa8762bd77059e1b605d803a",
  "_resolved": "https://registry.npmjs.org/fh-wfm-sync/-/fh-wfm-sync-0.3.3.tgz",
  "_from": "fh-wfm-sync@0.3.3"
}
