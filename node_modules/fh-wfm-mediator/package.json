{
  "name": "fh-wfm-mediator",
  "version": "0.3.3",
  "description": "An implementation of the mediator pattern for use with WFM",
  "main": "lib/angular/mediator-ng.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/feedhenry-raincatcher/raincatcher-mediator.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "keywords": [
    "wfm",
    "mediator"
  ],
  "author": {
    "name": "Brian Leathem"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "^4.7.0",
    "mediator-js": "^0.9.9",
    "bluebird": "^3.4.7"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-eslint": "18.0.0",
    "grunt-mocha-test": "^0.13.2",
    "load-grunt-tasks": "^3.5.2",
    "mocha": "^3.2.0",
    "sinon": "^1.17.7"
  },
  "readme": "# FeedHenry RainCatcher mediator [![Build Status](https://travis-ci.org/feedhenry-raincatcher/raincatcher-mediator.png)](https://travis-ci.org/feedhenry-raincatcher/raincatcher-mediator)\n\nAn implementation of the mediator pattern for use with RainCatcher modules.\n\n## API\n| Method | Description |\n| --- | --- |\n| `mediator#publish( channel, [data] )` | Publish data to a channel |\n| `mediator#subscribe( channel, callback )` | Subscribe to events in a channel |\n| `mediator#remove( channel, [identifier] )` | Unsubscribe to events in a channel |\n| `mediator#once( channel, callback )` | A one-time subscribtion to events in a channel |\n| `mediator#promise( channel )` | A promise-based API for `mediator#once` |\n\n### `Topics` utilities\n\nThis module also provides a fluent, promise-based API for subscribing to convention and adhering to the request-response pattern used throughout the RainCatcher modules and available through `mediator#request`.\nNamely if a `data:read` topic that is used to provide a feature such as reading data from a remote source asyncronously, the result of the operation is by convention published in the `done:data:read` topic, and if it results in an error, it is published to the `error:data:read` topic.\n\nThis utility module helps with enforcing the same namespace for a set of related topics without repeating string literals or constants, and adhering to the convention above. It is available under [`lib/topics`](./lib/topics/index.js) with jsdoc comments.\n\n#### Example\n\n```javascript\nvar mediator = require('fh-wfm-mediator');\nvar Topics = require('fh-wfm-mediator/lib/topics');\n\nvar topics = new Topics(mediator)\n  .prefix('wfm')\n  .entity('user')\n  // This will subscribe to wfm:user:read\n  // and publish results to done:wfm:user:read:{id}\n  // and errors to error:wfm:user:read:{id}\n  .on('read', function(id) {\n    // will request to 'data:user:read'\n    return this.mediator.request(['data', this.entity, 'read'].join(':'), id);\n  })\n  // If you do not return a Promise from the handler function,\n  // you must manually publish the result to another topic so it can be consumed\n  .on('delete', function(id) {\n    var self = this;\n    this.mediator.request(this.entity + ':delete', id).then(function() {\n      self.mediator.publish('done:ui:user:deleted:' + id);\n    }).catch(function(e) {\n      self.mediator.publish('error:ui:user:deleted:' + id, e);\n    });\n  });\n```\n\n## Usage in an Angular.js client\n\n### API\n\nBesides the above operations, the current operations are available :\n\n| Method | Description |\n| --- | --- |\n| `mediator#subscribeForScope( channel, scope, callback )` | Subscribe to events in a channel and unsubscribe when the scope is destroyed|\n\n### Setup\nThis module is packaged in a CommonJS format, exporting the name of the Angular namespace.  The module can be included in an angular.js as follows:\n\n```javascript\nangular.module('app', [\n, require('fh-wfm-mediator')\n...\n])\n```\n\n### Integration\nInject the `mediator` service to broadcast and subscribe to events\n\n```javascript\n.controller('MyController', function (mediator) {\n  ...\n}\n```\n\n## Usage in an node.js backend\nRequire the module to get an instance of the mediator.  Be sure to use that same instance throughout the application to maintain a single list of subscribers.\n\n```javascript\nmediator = require('fh-wfm-mediator/lib/mediator')\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/feedhenry-raincatcher/raincatcher-mediator/issues"
  },
  "homepage": "https://github.com/feedhenry-raincatcher/raincatcher-mediator#readme",
  "_id": "fh-wfm-mediator@0.3.3",
  "_shasum": "c68e47ab1b04a66b55373f0f582aa729d8acc7b6",
  "_resolved": "https://registry.npmjs.org/fh-wfm-mediator/-/fh-wfm-mediator-0.3.3.tgz",
  "_from": "fh-wfm-mediator@0.3.3"
}
